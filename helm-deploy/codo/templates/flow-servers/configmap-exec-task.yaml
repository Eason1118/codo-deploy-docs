apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "flowExecTask.uname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "flowExecTask.labels" . | nindent 4 }}
data:
  settings.py: |+
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-
    """
    Contact : 191715030@qq.com
    Author  : shenshuo
    Date    : 2019/4/15 14:59
    Desc    : 配置文件
    """

    import os
    from websdk2.consts import const

    ROOT_DIR = os.path.dirname(__file__)
    debug = True
    xsrf_cookies = False
    expire_seconds = 365 * 24 * 60 * 60
    cookie_secret = os.getenv('DEFAULT_COOKIE_SECRET', '{{ required "The cookieSecretPy is required" .Values.cookieSecretPy }}')

    DEFAULT_DB_DBHOST = os.getenv('DEFAULT_DB_DBHOST', '{{ required "The mysql.host is required" .Values.mysql.host }}')
    DEFAULT_DB_DBPORT = os.getenv('DEFAULT_DB_DBPORT', {{ required "The mysql.port is required" .Values.mysql.port }})
    DEFAULT_DB_DBUSER = os.getenv('DEFAULT_DB_DBUSER', '{{ required "The mysql.user is required" .Values.mysql.user }}')
    DEFAULT_DB_DBPWD = os.getenv('DEFAULT_DB_DBPWD', '{{ required "The mysql.passwd is required" .Values.mysql.passwd }}')
    DEFAULT_DB_DBNAME = os.getenv('DEFAULT_DB_DBNAME', '{{ required "The flowExecTaskDB is required" .Values.flowExecTaskDB }}')

    READONLY_DB_DBHOST = os.getenv('READONLY_DB_DBHOST', '{{ required "The mysql.host is required" .Values.mysql.host }}')
    READONLY_DB_DBPORT = os.getenv('READONLY_DB_DBPORT', {{ required "The mysql.port is required" .Values.mysql.port }})
    READONLY_DB_DBUSER = os.getenv('READONLY_DB_DBUSER', '{{ required "The mysql.user is required" .Values.mysql.user }}')
    READONLY_DB_DBPWD = os.getenv('READONLY_DB_DBPWD', '{{ required "The mysql.passwd is required" .Values.mysql.passwd }}')
    READONLY_DB_DBNAME = os.getenv('READONLY_DB_DBNAME', '{{ required "The flowExecTaskDB is required" .Values.flowExecTaskDB }}')

    DEFAULT_REDIS_HOST = os.getenv('DEFAULT_REDIS_HOST', '{{ required "The redis.host is required" .Values.redis.host }}')
    DEFAULT_REDIS_PORT = os.getenv('DEFAULT_REDIS_PORT', {{ required "The redis.port is required" .Values.redis.port }})
    DEFAULT_REDIS_DB = os.getenv('DEFAULT_REDIS_DB', {{ required "The flowExecTaskRedisDB is required" .Values.flowExecTaskRedisDB }})
    DEFAULT_REDIS_AUTH = os.getenv('DEFAULT_REDIS_AUTH', True)
    DEFAULT_REDIS_CHARSET = os.getenv('DEFAULT_REDIS_CHARSET', 'utf-8')
    DEFAULT_REDIS_PASSWORD = os.getenv('DEFAULT_REDIS_PASSWORD', '{{ required "The redis.passwd is required" .Values.redis.passwd }}')


    # 系统使用MQ
    DEFAULT_MQ_ADDR = os.getenv('DEFAULT_MQ_ADDR', '{{ required "The rabbitmq.host is required" .Values.rabbitmq.host }}')
    DEFAULT_MQ_PORT = os.getenv('DEFAULT_MQ_PORT', {{ required "The rabbitmq.port is required" .Values.rabbitmq.port }})
    DEFAULT_MQ_VHOST = os.getenv('DEFAULT_MQ_VHOST', '{{ required "The rabbitmq.vhost is required" .Values.rabbitmq.vhost }}')
    DEFAULT_MQ_USER = os.getenv('DEFAULT_MQ_USER', '{{ required "The rabbitmq.user is required" .Values.rabbitmq.user }}')
    DEFAULT_MQ_PWD = os.getenv('DEFAULT_MQ_PWD', '{{ required "The rabbitmq.passwd is required" .Values.rabbitmq.passwd }}')

    # agent使用的MQ 用来处理日志
    AGENT_MQ_ADDR = os.getenv('AGENT_MQ_ADDR',  '{{ required "The rabbitmq.host is required" .Values.rabbitmq.host }}')
    AGENT_MQ_PORT = os.getenv('AGENT_MQ_PORT',  {{ required "The rabbitmq.port is required" .Values.rabbitmq.port }})
    AGENT_MQ_VHOST = os.getenv('AGENT_MQ_VHOST', '{{ required "The rabbitmq.vhost is required" .Values.rabbitmq.vhost }}')
    AGENT_MQ_USER = os.getenv('AGENT_MQ_USER',  '{{ required "The rabbitmq.user is required" .Values.rabbitmq.user }}')
    AGENT_MQ_PWD = os.getenv('AGENT_MQ_PWD', '{{ required "The rabbitmq.passwd is required" .Values.rabbitmq.passwd }}')

    api_gw = "http://{{ template "gateway.innerApi" . }}"
    settings_auth_key = "{{ required "The gatewayInnerApiToken is required" .Values.gatewayInnerApiToken }}"

    # 钉钉和飞书免密链接
    dd_redirect = ""  # 免密
    fs_redirect = ""
    m_url_redirect = ""  # 移动端
    p_url_redirect = ""  # PC端

    # 输出屏蔽字
    block_key = ['password', 'secret']

    {{ required "The noticeConf is required" .Values.noticeConf | nindent 4 }}

    try:
      from local_settings import *
    except ImportError:
      print('local_settings.py  No Found.')

    settings = dict(
      debug=debug,
      xsrf_cookies=xsrf_cookies,
      cookie_secret=cookie_secret,
      expire_seconds=expire_seconds,
      block_key=block_key,
      notice_conf_map=notice_conf_map,
      settings_auth_key=settings_auth_key,
      api_gw=api_gw,
      dd_redirect=dd_redirect,
      fs_redirect=fs_redirect,
      m_url_redirect=m_url_redirect,
      p_url_redirect=p_url_redirect,
      app_name='codo_flow',
      databases={
        const.DEFAULT_DB_KEY: {
          const.DBHOST_KEY: DEFAULT_DB_DBHOST,
          const.DBPORT_KEY: DEFAULT_DB_DBPORT,
          const.DBUSER_KEY: DEFAULT_DB_DBUSER,
          const.DBPWD_KEY: DEFAULT_DB_DBPWD,
          const.DBNAME_KEY: DEFAULT_DB_DBNAME,
        },
        const.READONLY_DB_KEY: {
          const.DBHOST_KEY: READONLY_DB_DBHOST,
          const.DBPORT_KEY: READONLY_DB_DBPORT,
          const.DBUSER_KEY: READONLY_DB_DBUSER,
          const.DBPWD_KEY: READONLY_DB_DBPWD,
          const.DBNAME_KEY: READONLY_DB_DBNAME,
        }
      },
      redises={
        const.DEFAULT_RD_KEY: {
          const.RD_HOST_KEY: DEFAULT_REDIS_HOST,
          const.RD_PORT_KEY: DEFAULT_REDIS_PORT,
          const.RD_DB_KEY: DEFAULT_REDIS_DB,
          const.RD_AUTH_KEY: DEFAULT_REDIS_AUTH,
          const.RD_CHARSET_KEY: DEFAULT_REDIS_CHARSET,
          const.RD_PASSWORD_KEY: DEFAULT_REDIS_PASSWORD
        }
      },
      mqs={
        const.DEFAULT_MQ_KEY: {
          const.MQ_ADDR: DEFAULT_MQ_ADDR,
          const.MQ_PORT: DEFAULT_MQ_PORT,
          const.MQ_VHOST: DEFAULT_MQ_VHOST,
          const.MQ_USER: DEFAULT_MQ_USER,
          const.MQ_PWD: DEFAULT_MQ_PWD,
        },
        const.AGENT_MQ_KEY: {
          const.MQ_ADDR: AGENT_MQ_ADDR,
          const.MQ_PORT: AGENT_MQ_PORT,
          const.MQ_VHOST: AGENT_MQ_VHOST,
          const.MQ_USER: AGENT_MQ_USER,
          const.MQ_PWD: AGENT_MQ_PWD,
        }
      }
    )